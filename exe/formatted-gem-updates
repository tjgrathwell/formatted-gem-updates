#!/usr/bin/env ruby

require 'optparse'
require 'formatted_gem_updates'

command_line_options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: formatted-gem-updates [options]"

  opts.on("--amend", "Amend output to the last commit message") do |a|
    command_line_options[:amend] = a
  end

  opts.on("--version", "Print version number") do |q|
    puts FormattedGemUpdates::VERSION
    exit
  end
end.parse!

GIT_ROOT = `git rev-parse --show-toplevel`.strip
exit 1 unless $?.success?

Dir.chdir GIT_ROOT

current_ref = `git rev-parse --abbrev-ref HEAD`.strip

system("git checkout head^")

def capture_or_fail(cmd)
  `#{cmd}`.tap do |result|
    unless $?.success?
      puts "Tried to run the command '#{cmd}' but failed with this output:\n#{result}"
      exit 1
    end
  end
end

old_list = capture_or_fail('bundle list')

system("git checkout #{current_ref}")

new_list = capture_or_fail('bundle list')

def gem_versions(list_output)
  list_output.split("\n").each_with_object({}) do |line, hsh|
    if line.match(/^\s*\*\s*(.*?) \((.*?)\)/)
      hsh[$1] = $2
    end
  end
end

old_gems = gem_versions(old_list)
new_gems = gem_versions(new_list)

updated = {}
removed = {}

old_gems.each do |gem, version|
  if new_gems[gem]
    if version != new_gems[gem]
      updated[gem] = {
        old: version,
        new: new_gems[gem]
      }
    end
    new_gems.delete(gem)
  else
    removed[gem] = version
  end
end

$longest_name_length = (updated.keys.map(&:length) + removed.keys.map(&:length) + new_gems.keys.map(&:length)).max
$longest_version_length = (
  new_gems.values.map(&:length) +
  removed.values.map(&:length) +
  updated.values.map { |g| [g[:old].length, g[:new].length].max }
).max

def format_for_length(length, lhs, rhs)
  "%-#{length}s  %s" % [lhs, rhs]
end

output_lines = []

if updated.length > 0
  output_lines << "UPDATED:"
  updated.each do |gem, info|
    formatted_version = format_for_length($longest_version_length, info[:old], info[:new])
    output_lines << format_for_length($longest_name_length, gem, formatted_version)
  end
end

if new_gems.length > 0
  output_lines << "\nADDED:"
  new_gems.each do |gem, version|
    output_lines << format_for_length($longest_name_length, gem, version)
  end
end

if removed.length > 0
  output_lines << "\nREMOVED:"
  removed.each do |gem, version|
    output_lines << format_for_length($longest_name_length, gem, version)
  end
end

if command_line_options[:amend]
  existing_message = `git log -1 --pretty=%B`.strip
  output_lines.unshift("#{existing_message}\n")
  system("git", "commit", "--amend", "-m", output_lines.join("\n"))
else
  puts output_lines
end
